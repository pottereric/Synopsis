using System;
using System.Linq;

namespace BracketAnalyzer
{
    public class Bracket : IBracket
    {
        private int[][] topTeamMap = new int[4][]{
            new int [] {1,8,5,4,3,6,7,2},
            new int [] {1,3,5,7},
            new int [] {1,3},
            new int [] {1},
        };

        private int[][] bottomTeamMap = new int[4][]{
            new int [] {16,9,12,13,14,11,10,15},
            new int [] {2,4,6,8},
            new int [] {2,4},
            new int [] {2},
        };

        // Teams - organized by seed
        protected Team[] teams = new Team[16];

        // Winners - organized by game number
        protected Team[,] winners = new Team[4, 8];

        public bool SetGameWinner(int round, int game, string teamName)
        {
            var teamList = teams.Where(t => t.Name != null && t.Name == teamName);
            if (teamList.Count() != 1)
            {
                return false;
            }

            winners[round - 1, game - 1] = teamList.First();
            return true;
        }

        public void SetTeam(int seed, string teamName)
        {
            teams[seed - 1] = new Team(seed, teamName);
        }

        public bool WasUpset(int round, int game)
        {
            var winner = winners[round - 1, game - 1];

            var team1 = GetTopTeam(round, game);
            var team2 = GetBottomTeam(round, game);

            var highSeed = team1.Seed < team2.Seed ? team1 : team2;

            return winner != highSeed;
        }

        public Team GetTopTeam(int round, int game)
        {
            if (round == 1)
            {
                return teams[topTeamMap[round - 1][game - 1] - 1];
            }
            return winners[round - 2, topTeamMap[round - 1][game - 1] - 1];
        }

        public Team GetBottomTeam(int round, int game)
        {
            if (round == 1)
            {
                return teams[bottomTeamMap[round - 1][game - 1] - 1];
            }
            return winners[round - 2, bottomTeamMap[round - 1][game - 1] - 1];
        }
    }
}